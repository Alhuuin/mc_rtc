#!/usr/bin/env python

# This script converts a python seq file generated by the PG into the JSON format read by the C++ part

from mc_rbdyn.stance import loadStances, IdentityContactAction, AddContactAction, RemoveContactAction
import spacevecalg as sva
import json
import sys

def usage():
  print "{} [.seq file]".format(sys.argv[0])

def svapt2dict(pt):
  pt_out = {}
  pt_out["rotation"] = []
  rot = pt.rotation()
  for i in xrange(3):
    for j in xrange(3):
      pt_out["rotation"].append(rot.coeff(i,j))
  t = pt.translation()
  pt_out["translation"] = []
  for i in xrange(3):
    pt_out["translation"].append(t[i])
  return pt_out

def surface2dict(s):
  s_out = {}
  s_out["name"] = s.name
  s_out["bodyName"] = s.bodyName;
  s_out["X_b_s"] = svapt2dict(s.X_b_s)
  s_out["materialName"] = s.materialName
  if hasattr(s, "planarPoints"):
    s_out["planarPoints"] = []
    for px,py in s.planarPoints:
      p = {'x': px, 'y': py}
      s_out["planarPoints"].append(p)
  if hasattr(s, "radius"):
    s_out["radius"] = s.radius
    s_out["width"] = s.width
  if hasattr(s, "pointsFromOrigin"):
    s_out["pointFromOrigin"] = []
    for p in s.pointsFromOrigin:
      s_out["pointFromOrigin"].append(svapt2dict(p))
    s_out["X_b_motor"] = svapt2dict(s.X_b_motor)
    s_out["motorMaxTorque"] = s.motorMaxTorque
  return s_out

def contact2dict(c):
  c_out = {}
  c_out["robotSurface"] = surface2dict(c.robotSurface)
  c_out["envSurface"] = surface2dict(c.envSurface)
  c_out["is_fixed"] = c.isFixed()
  if c.isFixed():
    c_out["X_es_rs"] = svapt2dict(c.X_es_rs)
  else:
    c_out["X_es_rs"] = svapt2dict(sva.PTransform.identity())
  return c_out

def action2dict(a):
  a_out = {}
  if isinstance(a, IdentityContactAction):
    a_out["type"] = "Identity"
  if isinstance(a, AddContactAction):
    a_out["type"] = "Add"
    a_out["contact"] = contact2dict(a.contact)
  if isinstance(a, RemoveContactAction):
    a_out["type"] = "Remove"
    a_out["contact"] = contact2dict(a.contact)
  return a_out

def stance2dict(s):
  s_out = {}
  s_out["q"] = s.q
  s_out["geomContacts"] = []
  for c in s.geomContacts:
    s_out["geomContacts"].append(contact2dict(c))
  s_out["stabContacts"] = []
  for c in s.stabContacts:
    s_out["stabContacts"].append(contact2dict(c))
  return s_out

if __name__ == "__main__":
  if len(sys.argv) < 2:
    usage()
    sys.exit(1)

  seq_in = sys.argv[1]

  seq_out = seq_in.replace(".seq", ".json")
  data_out = {"stances" : [], "actions": []}

  stances, actions = loadStances(seq_in)

  for s in stances:
    data_out["stances"].append(stance2dict(s))
  for a in actions:
    data_out["actions"].append(action2dict(a))

  with open(seq_out, 'w') as f_out:
    json.dump(data_out, f_out)

  print "Saved {} stances and {} actions into json file".format(len(stances), len(actions))
